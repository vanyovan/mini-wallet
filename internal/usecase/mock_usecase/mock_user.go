// Code generated by MockGen. DO NOT EDIT.

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vanyovan/mini-wallet.git/internal/entity"
)

// MockUserServiceProvider is a mock of UserServiceProvider interface.
type MockUserServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceProviderMockRecorder
}

// MockUserServiceProviderMockRecorder is the mock recorder for MockUserServiceProvider.
type MockUserServiceProviderMockRecorder struct {
	mock *MockUserServiceProvider
}

// NewMockUserServiceProvider creates a new mock instance.
func NewMockUserServiceProvider(ctrl *gomock.Controller) *MockUserServiceProvider {
	mock := &MockUserServiceProvider{ctrl: ctrl}
	mock.recorder = &MockUserServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceProvider) EXPECT() *MockUserServiceProviderMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceProvider) CreateUser(ctx context.Context, userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceProviderMockRecorder) CreateUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceProvider)(nil).CreateUser), ctx, userId)
}

// GetUserByToken mocks base method.
func (m *MockUserServiceProvider) GetUserByToken(ctx context.Context, token string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", ctx, token)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockUserServiceProviderMockRecorder) GetUserByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockUserServiceProvider)(nil).GetUserByToken), ctx, token)
}

// GetUserByUserId mocks base method.
func (m *MockUserServiceProvider) GetUserByUserId(userId string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserId", userId)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserId indicates an expected call of GetUserByUserId.
func (mr *MockUserServiceProviderMockRecorder) GetUserByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserId", reflect.TypeOf((*MockUserServiceProvider)(nil).GetUserByUserId), userId)
}

// GetWalletByUserId mocks base method.
func (m *MockUserServiceProvider) GetWalletByUserId(ctx context.Context, userId string) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserId", ctx, userId)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserId indicates an expected call of GetWalletByUserId.
func (mr *MockUserServiceProviderMockRecorder) GetWalletByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserId", reflect.TypeOf((*MockUserServiceProvider)(nil).GetWalletByUserId), ctx, userId)
}

// Code generated by MockGen. DO NOT EDIT.

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vanyovan/mini-wallet.git/internal/entity"
)

// MockTransactionServiceProvider is a mock of TransactionServiceProvider interface.
type MockTransactionServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceProviderMockRecorder
}

// MockTransactionServiceProviderMockRecorder is the mock recorder for MockTransactionServiceProvider.
type MockTransactionServiceProviderMockRecorder struct {
	mock *MockTransactionServiceProvider
}

// NewMockTransactionServiceProvider creates a new mock instance.
func NewMockTransactionServiceProvider(ctrl *gomock.Controller) *MockTransactionServiceProvider {
	mock := &MockTransactionServiceProvider{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceProvider) EXPECT() *MockTransactionServiceProviderMockRecorder {
	return m.recorder
}

// CreateDepositWallet mocks base method.
func (m *MockTransactionServiceProvider) CreateDepositWallet(ctx context.Context, user entity.User, param entity.TransactionRequest) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepositWallet", ctx, user, param)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepositWallet indicates an expected call of CreateDepositWallet.
func (mr *MockTransactionServiceProviderMockRecorder) CreateDepositWallet(ctx, user, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepositWallet", reflect.TypeOf((*MockTransactionServiceProvider)(nil).CreateDepositWallet), ctx, user, param)
}

// CreateWalletTransaction mocks base method.
func (m *MockTransactionServiceProvider) CreateWalletTransaction(ctx context.Context, walletId, status, typeTransaction string, amount float64, referenceId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWalletTransaction", ctx, walletId, status, typeTransaction, amount, referenceId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWalletTransaction indicates an expected call of CreateWalletTransaction.
func (mr *MockTransactionServiceProviderMockRecorder) CreateWalletTransaction(ctx, walletId, status, typeTransaction, amount, referenceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWalletTransaction", reflect.TypeOf((*MockTransactionServiceProvider)(nil).CreateWalletTransaction), ctx, walletId, status, typeTransaction, amount, referenceId)
}

// CreateWithdrawalWallet mocks base method.
func (m *MockTransactionServiceProvider) CreateWithdrawalWallet(ctx context.Context, user entity.User, param entity.TransactionRequest) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawalWallet", ctx, user, param)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdrawalWallet indicates an expected call of CreateWithdrawalWallet.
func (mr *MockTransactionServiceProviderMockRecorder) CreateWithdrawalWallet(ctx, user, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawalWallet", reflect.TypeOf((*MockTransactionServiceProvider)(nil).CreateWithdrawalWallet), ctx, user, param)
}

// GetTransactionByWalletId mocks base method.
func (m *MockTransactionServiceProvider) GetTransactionByWalletId(walletId string) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByWalletId", walletId)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByWalletId indicates an expected call of GetTransactionByWalletId.
func (mr *MockTransactionServiceProviderMockRecorder) GetTransactionByWalletId(walletId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByWalletId", reflect.TypeOf((*MockTransactionServiceProvider)(nil).GetTransactionByWalletId), walletId)
}

// UpdateTransactionStatusByTransactionId mocks base method.
func (m *MockTransactionServiceProvider) UpdateTransactionStatusByTransactionId(ctx context.Context, status, transactionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatusByTransactionId", ctx, status, transactionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatusByTransactionId indicates an expected call of UpdateTransactionStatusByTransactionId.
func (mr *MockTransactionServiceProviderMockRecorder) UpdateTransactionStatusByTransactionId(ctx, status, transactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatusByTransactionId", reflect.TypeOf((*MockTransactionServiceProvider)(nil).UpdateTransactionStatusByTransactionId), ctx, status, transactionId)
}

// UpdateWalletBalanceByUserId mocks base method.
func (m *MockTransactionServiceProvider) UpdateWalletBalanceByUserId(ctx context.Context, amount float64, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletBalanceByUserId", ctx, amount, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletBalanceByUserId indicates an expected call of UpdateWalletBalanceByUserId.
func (mr *MockTransactionServiceProviderMockRecorder) UpdateWalletBalanceByUserId(ctx, amount, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalanceByUserId", reflect.TypeOf((*MockTransactionServiceProvider)(nil).UpdateWalletBalanceByUserId), ctx, amount, userId)
}

// ViewWalletTransaction mocks base method.
func (m *MockTransactionServiceProvider) ViewWalletTransaction(ctx context.Context, user entity.User) (entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewWalletTransaction", ctx, user)
	ret0, _ := ret[0].(entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewWalletTransaction indicates an expected call of ViewWalletTransaction.
func (mr *MockTransactionServiceProviderMockRecorder) ViewWalletTransaction(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewWalletTransaction", reflect.TypeOf((*MockTransactionServiceProvider)(nil).ViewWalletTransaction), ctx, user)
}

// Code generated by MockGen. DO NOT EDIT.

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vanyovan/mini-wallet.git/internal/entity"
)

// MockWalletServiceProvider is a mock of WalletServiceProvider interface.
type MockWalletServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceProviderMockRecorder
}

// MockWalletServiceProviderMockRecorder is the mock recorder for MockWalletServiceProvider.
type MockWalletServiceProviderMockRecorder struct {
	mock *MockWalletServiceProvider
}

// NewMockWalletServiceProvider creates a new mock instance.
func NewMockWalletServiceProvider(ctrl *gomock.Controller) *MockWalletServiceProvider {
	mock := &MockWalletServiceProvider{ctrl: ctrl}
	mock.recorder = &MockWalletServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletServiceProvider) EXPECT() *MockWalletServiceProviderMockRecorder {
	return m.recorder
}

// CreateEnabledWallet mocks base method.
func (m *MockWalletServiceProvider) CreateEnabledWallet(ctx context.Context, param entity.User) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnabledWallet", ctx, param)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnabledWallet indicates an expected call of CreateEnabledWallet.
func (mr *MockWalletServiceProviderMockRecorder) CreateEnabledWallet(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnabledWallet", reflect.TypeOf((*MockWalletServiceProvider)(nil).CreateEnabledWallet), ctx, param)
}

// CreateWallet mocks base method.
func (m *MockWalletServiceProvider) CreateWallet(ctx context.Context, userId string) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, userId)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletServiceProviderMockRecorder) CreateWallet(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletServiceProvider)(nil).CreateWallet), ctx, userId)
}

// GetWalletByUserId mocks base method.
func (m *MockWalletServiceProvider) GetWalletByUserId(ctx context.Context, userId string) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserId", ctx, userId)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserId indicates an expected call of GetWalletByUserId.
func (mr *MockWalletServiceProviderMockRecorder) GetWalletByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserId", reflect.TypeOf((*MockWalletServiceProvider)(nil).GetWalletByUserId), ctx, userId)
}

// ViewWallet mocks base method.
func (m *MockWalletServiceProvider) ViewWallet(ctx context.Context, param entity.User) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewWallet", ctx, param)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewWallet indicates an expected call of ViewWallet.
func (mr *MockWalletServiceProviderMockRecorder) ViewWallet(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewWallet", reflect.TypeOf((*MockWalletServiceProvider)(nil).ViewWallet), ctx, param)
}
